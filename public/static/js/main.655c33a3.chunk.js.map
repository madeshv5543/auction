{"version":3,"sources":["logo.svg","components/AuctionListView/AuctionListView.js","components/AuctionView/AutionView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AuctionFActoryInstance","Auction","contract","AuctionContract","Component","AuctionFactory","AuctionFactoryContract","AuctionListView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_inputReserve","_inputBidIncrement","_inputStartBlock","_inputEndBlock","_inputBidAmount","state","currentAccount","currentAccountBalance","currentAccountBids","accounts","auctions","auctionEventListeners","bidAmount","blockNumber","intervalId","accountId","onChangeAccount","bind","assertThisInitialized","onClickCreateAuction","getAllAuctions","getAuction","cancelAuction","getAccountBids","onLogBid","OnClickWithdraw","handleChangeevent","getBlockNumber","getAccounts","_this2","newApp","setProvider","web3","currentProvider","sendAsync","send","apply","arguments","console","log","adh","deployed","then","instance","AuctionCreated","fromBlock","toBlock","watch","err","resp","acc","setState","setInterval","clearInterval","_this3","setCurrentAccount","_this4","evt","target","value","account","self","getBalance","_this5","getBidPromises","map","auction","fundsByBidder","bid","address","Promise","all","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","x","fromWei","toString","return","createAuction","from","gas","_this6","args","resolve","reject","allAuctions","result","auctionAddr","_this7","assign","unloggedAuctions","filter","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","LogBid","_this8","at","owner","startBlock","endBlock","bidIncrement","highestBid","getHighestBid","highestBindingBid","highestBidder","canceled","vals","_vals","slicedToArray","_this9","_","event","auctionnew","placeBid","to","toWei","_this10","withdraw","res","_this11","react_default","a","createElement","className","type","ref","defaultValue","onClick","status","key","substr","onChange","onClickBid","acct","App","components_AuctionListView_AuctionListView","Boolean","window","location","hostname","match","addEventListener","web3Provider","Web3","providers","HttpProvider","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.655c33a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport './AuctionListView.css';\r\nimport AuctionFactoryContract from '../../contracts/AuctionFactory.json';\r\nimport AuctionContract from '../../contracts/Auction.json';\r\nimport   contract from  'truffle-contract';\r\nvar AuctionFactory = contract(AuctionFactoryContract);\r\nvar Auction =  contract(AuctionContract);\r\nvar AuctionFActoryInstance;\r\nvar AuctionInstance;\r\n\r\nclass AuctionListView extends Component {\r\n        constructor(props) {\r\n            super(props)\r\n            this.state = {\r\n                currentAccount:'',\r\n                currentAccountBalance:'',\r\n                currentAccountBids:{},\r\n                accounts:[],\r\n                auctions:[],\r\n                auctionEventListeners:{},\r\n                bidAmount: 0,\r\n                blockNumber:0,\r\n                intervalId: null,\r\n                accountId:null\r\n            }\r\n\r\n            this.onChangeAccount = this.onChangeAccount.bind(this)\r\n            this.onClickCreateAuction = this.onClickCreateAuction.bind(this)\r\n            this.getAllAuctions = this.getAllAuctions.bind(this)\r\n            this.getAuction = this.getAuction.bind(this)\r\n            this.cancelAuction = this.cancelAuction.bind(this)\r\n            this.getAccountBids = this.getAccountBids.bind(this)\r\n            this.onLogBid = this.onLogBid.bind(this)\r\n            this.OnClickWithdraw = this.OnClickWithdraw.bind(this)\r\n            this.handleChangeevent = this.handleChangeevent.bind(this)\r\n            this.getBlockNumber = this.getBlockNumber.bind(this)\r\n            this.getAccounts= this.getAccounts.bind(this)\r\n        }\r\n\r\n        _inputReserve = null;\r\n        _inputBidIncrement = null;\r\n        _inputStartBlock = null;\r\n        _inputEndBlock = null;\r\n        _inputBidAmount = null;\r\n\r\n        componentDidMount() {\r\n            var newApp = this;\r\n            AuctionFactory = contract(AuctionFactoryContract);\r\n            AuctionFactory.setProvider(this.props.web3.currentProvider);\r\n            if (typeof AuctionFactory.currentProvider.sendAsync !== \"function\") {\r\n                AuctionFactory.currentProvider.sendAsync = function() {\r\n                    return AuctionFactory.currentProvider.send.apply(\r\n                        AuctionFactory.currentProvider, arguments\r\n                    );\r\n                };\r\n            }\r\n            Auction.setProvider(this.props.web3.currentProvider);\r\n            if (typeof Auction.currentProvider.sendAsync !== \"function\") {\r\n                Auction.currentProvider.sendAsync = function() {\r\n                    return Auction.currentProvider.send.apply(\r\n                        Auction.currentProvider, arguments\r\n                    );\r\n                };\r\n            }\r\n\r\n            this.getAllAuctions()\r\n            console.log(\"blocknumber\",this.props.web3.adh.getBlockNumber())\r\n\r\n            AuctionFactory.deployed().then(\r\n                function(instance) {\r\n                    console.log(\"contract err\", instance)\r\n                    AuctionFActoryInstance = instance;\r\n                    AuctionFActoryInstance.AuctionCreated({ fromBlock: 0, toBlock: 'latest' }).watch((err, resp) => {\r\n                        console.log('AuctionCreated', err, resp)\r\n                        newApp.getAllAuctions()\r\n                    })\r\n                }\r\n            )\r\n\r\n            // Auction.deployed().then(\r\n            //     function(instance) {\r\n            //         console.log(\"contract err 2\", instance)\r\n            //         AuctionInstance = instance;\r\n            //     }\r\n            // )\r\n            \r\n            this.props.web3.adh.getAccounts((err,acc) => {\r\n                this.setState({\r\n                    currentAccount : acc[0],\r\n                    accounts : acc\r\n                })\r\n            })\r\n\r\n            let  accountId = setInterval(this.getAccounts, 1000) \r\n            let intervalId = setInterval(this.getBlockNumber, 1000);\r\n            this.setState({intervalId: intervalId, accountId});\r\n\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            // use intervalId from the state to clear the interval\r\n            clearInterval(this.state.intervalId);\r\n         }\r\n\r\n         getAccounts(){\r\n            this.props.web3.adh.getAccounts((err,acc) => {\r\n                if(this.state.currentAccount !== acc[0]){\r\n                    this.setState({\r\n                        currentAccount : acc[0],\r\n                        accounts : acc\r\n                    })\r\n                    this.setCurrentAccount(acc[0])\r\n                }\r\n            })\r\n         }\r\n\r\n        getBlockNumber() {\r\n            this.props.web3.adh.getBlockNumber((err, blockNumber) => {\r\n                this.setState({\r\n                    blockNumber: blockNumber\r\n                })\r\n            })\r\n        }\r\n\r\n        onChangeAccount(evt) {\r\n            this.setCurrentAccount(evt.target.value)\r\n        }\r\n        \r\n        setCurrentAccount(account) {\r\n            let self = this;\r\n            console.log(\"acc\", account) \r\n             this.props.web3.adh.getBalance(account,(err, acc) => {\r\n                console.log(\"account\", acc/1e18)\r\n             })\r\n\r\n             self.getAccountBids(account).then(\r\n                 currentAccountBids =>{\r\n                     console.log(\"currentAccountBids\", currentAccountBids)\r\n                     self.props.web3.adh.getBalance(account,(err, acc) => {\r\n                        self.setState({\r\n                            currentAccount: account,\r\n                            currentAccountBalance: acc/ 1e18,\r\n                            currentAccountBids\r\n                        })\r\n                     })\r\n                 }\r\n             )\r\n            // this.props.web3.adh.defaultAccount = account\r\n    \r\n            // this.getAccountBids(account).then(currentAccountBids => {\r\n            //     console.log(\"cureent account bids\", currentAccountBids)\r\n            //     this.setState({\r\n            //         currentAccount: account,\r\n            //         currentAccountBalance: this.props.web3.fromWei(this.props.web3.adh.getBalance(account), 'ether').toString(),\r\n            //         currentAccountBids,\r\n            //     })\r\n            // })\r\n        }\r\n\r\n        getAccountBids(account) {\r\n            const getBidPromises = this.state.auctions.map(auction => {\r\n                return auction.contract.fundsByBidder.call(account).then(bid => {\r\n                    return { auction: auction.address, bid }\r\n                })\r\n            })\r\n    \r\n            return Promise.all(getBidPromises).then(results => {\r\n                console.log(\"get all bids user\", results)\r\n                let currentAccountBids = {}\r\n                for (let x of results) {\r\n                    currentAccountBids[x.auction] = this.props.web3.fromWei(x.bid, 'ether').toString()\r\n                }\r\n                return currentAccountBids\r\n            })\r\n        }\r\n\r\n        onClickCreateAuction() {\r\n            console.log(\"values\", this._inputBidIncrement.value, this._inputStartBlock.value, this._inputEndBlock.value, this.state.currentAccount)\r\n            AuctionFActoryInstance.createAuction(\r\n                // this._inputReserve.value,\r\n                this._inputBidIncrement.value,\r\n                this._inputStartBlock.value,\r\n                this._inputEndBlock.value,\r\n                'test Action',\r\n                { from: this.state.currentAccount, gas: 4000000 })\r\n        }\r\n\r\n        onLogBid(err, resp) {\r\n            console.log('LogBid ~>', resp.args)\r\n            this.getAllAuctions()\r\n            this.getAccountBids(this.state.currentAccount).then(currentAccountBids => {\r\n                this.setState({ currentAccountBids })\r\n            })\r\n        }\r\n\r\n        async getAllAuctions() {\r\n            if(AuctionFActoryInstance){\r\n                AuctionFActoryInstance = await AuctionFactory.deployed()\r\n            }\r\n            return new Promise((resolve, reject) => {\r\n                return AuctionFactory.deployed().then(instance => {\r\n                    instance.allAuctions.call().then(result => {\r\n                        return Promise.all( result.map(auctionAddr => this.getAuction(auctionAddr)) )\r\n                    }).then(auctions => {\r\n        \r\n                        let auctionEventListeners = Object.assign({}, this.state.auctionEventListeners)\r\n                        const unloggedAuctions = auctions.filter(auction => this.state.auctionEventListeners[auction.address] === undefined)\r\n                        for (let auction of unloggedAuctions) {\r\n                            auctionEventListeners[auction.address] = auction.contract.LogBid({ fromBlock: 0, toBlock: 'latest' })\r\n                            auctionEventListeners[auction.address].watch(this.onLogBid)\r\n                        }\r\n        \r\n                        this.setState({ auctions, auctionEventListeners }, resolve)\r\n                        this.setCurrentAccount(this.state.currentAccount)\r\n                    })\r\n                })\r\n            })\r\n        }\r\n\r\n        getAuction(auctionAddr) {\r\n            const auction = Auction.at(auctionAddr)\r\n            const owner = auction.owner.call()\r\n            const startBlock = auction.startBlock.call()\r\n            const endBlock = auction.endBlock.call()\r\n            const bidIncrement = auction.bidIncrement.call()\r\n            const highestBid = auction.getHighestBid.call()\r\n            const highestBindingBid = auction.highestBindingBid.call()\r\n            const highestBidder = auction.highestBidder.call()\r\n            const canceled = auction.canceled.call()\r\n    \r\n            return Promise.all([ owner, startBlock, endBlock, bidIncrement, highestBid, highestBindingBid, highestBidder, canceled ]).then(vals => {\r\n                const [ owner, startBlock, endBlock, bidIncrement, highestBid, highestBindingBid, highestBidder, canceled ] = vals\r\n                return {\r\n                    contract: auction,\r\n                    address: auctionAddr,\r\n                    owner: owner,\r\n                    startBlock: startBlock.toString(),\r\n                    endBlock: endBlock.toString(),\r\n                    bidIncrement: this.props.web3.fromWei(bidIncrement, 'ether').toString(),\r\n                    highestBid: this.props.web3.fromWei(highestBid, 'ether').toString(),\r\n                    highestBindingBid: this.props.web3.fromWei(highestBindingBid, 'ether').toString(),\r\n                    highestBidder: highestBidder,\r\n                    canceled: canceled,\r\n                }\r\n            })\r\n        }\r\n\r\n        cancelAuction(auction) {\r\n            auction.contract.cancelAuction({ from: this.state.currentAccount }).then(_ => {\r\n                this.getAllAuctions()\r\n            })\r\n        }\r\n        handleChangeevent(event){\r\n            this.setState({bidAmount: event.target.value})\r\n        }\r\n        onClickBid(auctionnew) {\r\n            console.log(\"auctionnew\", auctionnew)\r\n            // console.log( this.props.web3.eth.getBalance(this.state.currentAccount))\r\n            // this.props.web3.eth.sendTransaction({from: this.state.currentAccount, value:this.props.web3.toWei(1, 'ether'), to: auctionnew.address},function(err,res){\r\n            //     console.log(\"placebid\", err, res)\r\n            // })\r\n            // var data = { from: this.state.currentAccount, value: this.props.web3.toWei(this.state.bidAmount, 'ether') };\r\n            auctionnew.contract.placeBid({from:this.state.currentAccount, to:auctionnew.address, value: this.props.web3.toWei(this.state.bidAmount, \"ether\")})\r\n        //    let data = auctionnew.contract.placeBid.getData({from:this.state.currentAccount, to:auctionnew.address, value: this.props.web3.toWei(this.state.bidAmount, \"ether\")})\r\n        //    console.log(\"data\", data)\r\n\r\n        }\r\n\r\n        OnClickWithdraw(auctionnew) {\r\n            auctionnew.contract.withdraw({ from: this.state.currentAccount }).then( res=> {\r\n             this.getAllAuctions()\r\n            })\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <h1>Auctions</h1>\r\n    \r\n                    <div>\r\n                        Current block: {this.state.blockNumber}\r\n                    </div>\r\n    \r\n                    <div className=\"form-create-auction\">\r\n                        <h2>Create auction</h2>\r\n                        <div>\r\n                            Reserve <input type=\"text\" ref={x => this._inputReserve = x} defaultValue={0} />\r\n                        </div>\r\n                        <div>\r\n                            Bid increment <input type=\"text\" ref={x => this._inputBidIncrement = x} defaultValue={100000000000000000} />\r\n                        </div>\r\n                        <div>\r\n                            Start block <input type=\"text\" ref={x => this._inputStartBlock = x} defaultValue={0} />\r\n                        </div>\r\n                        <div>\r\n                            End block <input type=\"text\" ref={x => this._inputEndBlock = x} defaultValue={10} />\r\n                        </div>\r\n                        <button onClick={this.onClickCreateAuction}>Create Auction</button>\r\n                    </div>\r\n    \r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Address</td>\r\n                                <td>Start block</td>\r\n                                <td>End block</td>\r\n                                <td>Bid increment</td>\r\n                                <td>Highest bid</td>\r\n                                <td>Highest binding bid</td>\r\n                                <td>Highest bidder</td>\r\n                                <td>Your bid</td>\r\n                                <td>Status</td>\r\n                                <td>Actions</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.auctions.map(auction => {\r\n                            let status = 'Running'\r\n                            if (auction.canceled) {\r\n                                status = 'Canceled'\r\n                            } else if (this.state.blockNumber > auction.endBlock) {\r\n                                status = 'Ended'\r\n                            } else if (this.state.blockNumber < auction.startBlock) {\r\n                                status = 'Unstarted'\r\n                            }\r\n                            return (\r\n                                <tr key={auction.address}>\r\n                                    <td>{auction.address}</td>\r\n                                    <td>{auction.startBlock}</td>\r\n                                    <td>{auction.endBlock}</td>\r\n                                    <td>{auction.bidIncrement} ADHI</td>\r\n                                    <td>{auction.highestBid} ADHI</td>\r\n                                    <td>{auction.highestBindingBid} ADHI</td>\r\n                                    <td>{auction.highestBidder.substr(0, 6)}</td>\r\n                                    <td>{this.state.currentAccountBids[auction.address]}</td>\r\n                                    <td>{status}</td>\r\n                                    <td>\r\n                                        {auction.owner == this.state.currentAccount && (status === 'Running' || status === 'Unstarted') &&\r\n                                            <button onClick={() => this.cancelAuction(auction)}>Cancel</button>\r\n                                        }\r\n                                        { (status === 'Canceled' || status === 'Ended') &&\r\n                                            <button onClick={() => this.OnClickWithdraw(auction)}>withdraw</button>\r\n                                        }\r\n                                        <div>\r\n                                            <input  type=\"text\" onChange={this.handleChangeevent} />\r\n                                            <button onClick={() => this.onClickBid(auction)}>Bid</button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n    \r\n                    <hr />\r\n    \r\n                    <div>\r\n                    <div> Current Balance : {this.state.currentAccountBalance} ADHI</div>\r\n                    {/* <div>\r\n                        <input type=\"text\" ref= {x => this._inputBidAmount = x} />\r\n                        <button onClick={this.onClickBid}>Palce Bid</button>\r\n                    </div> */}\r\n                    <select onChange={this.onChangeAccount}>\r\n                        {this.state.accounts.map( acct => <option key={acct} value={acct}>{acct}</option>)}\r\n                    </select>\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n    \r\n}\r\n\r\nexport default AuctionListView","import React , { Component } from 'react';\r\nimport   contract from  'truffle-contract';\r\nimport AuctionContract from '../../contracts/Auction.json';\r\nvar Auction =  contract(AuctionContract);\r\nclass AuctionView extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            sender:\"\",\r\n            highestBid:0,\r\n            accounts:[]\r\n        }\r\n        this.onClickBid = this.onClickBid.bind(this);\r\n        this.onChangeAccount = this.onChangeAccount.bind(this);\r\n    }\r\n\r\n    _inputBidAmount= null;\r\n    componentDidMount() {\r\n        Auction.setProvider(this.props.web3.currentProvider);\r\n        if (typeof Auction.currentProvider.sendAsync !== \"function\") {\r\n            Auction.currentProvider.sendAsync = function() {\r\n                return Auction.currentProvider.send.apply(\r\n                    Auction.currentProvider, arguments\r\n                );\r\n            };\r\n        }\r\n        this.props.web3.eth.getAccounts((err,acc) => {\r\n            this.setState({\r\n                sender : acc[0],\r\n                accounts : acc\r\n            })\r\n        })\r\n    };\r\n\r\n    onClickBid(){\r\n        const bidAmount = this._inputBidAmount.value;\r\n        Auction.deployed().placeBid({ from:this.state.sender, value:bidAmount, gas:2000000 }).then(\r\n            result => {\r\n                console.log(\"bid placed \", result)\r\n            }\r\n        )\r\n    }\r\n\r\n    onChangeAccount(evt) {\r\n        this.setState({\r\n            sender:evt.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n            return (\r\n                <div>\r\n                    <div> Current Price : {this.state.highestBid}</div>\r\n                    <div>\r\n                        <input type=\"text\" ref= {x => this._inputBidAmount = x} />\r\n                        <button onClick={this.onClickBid}>Palce Bid</button>\r\n                    </div>\r\n                    <select onChange={this.onChangeAccount}>\r\n                        {this.state.accounts.map( acct => <option key={acct} value={acct}>{acct}</option>)}\r\n                    </select>\r\n                </div>\r\n            )\r\n    }\r\n\r\n}\r\n\r\nexport default AuctionView;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport AuctionView from './components/AuctionView/AutionView';\nimport AuctionListView from './components/AuctionListView/AuctionListView';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n            <AuctionListView web3={this.props.web3} />\n            {/* <AuctionView web3={this.props.web3} /> */}\n        </div>\n    )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Web3 from 'web3-adhi'\nvar web3Location = `https://adhinet.com/`\nwindow.addEventListener('load', function() {\n    var web3Provider ;\n    var web3 =  window.web3;\n    console.log(typeof web3)\n    if(typeof web3 !== 'undefined'){\n        web3Provider = new Web3(web3.currentProvider);\n    }else{\n        web3Provider = new Web3(new Web3.providers.HttpProvider(web3Location))\n    }\n    ReactDOM.render(<App web3={web3Provider} />, document.getElementById('root'));\n    serviceWorker.unregister();\n})\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}